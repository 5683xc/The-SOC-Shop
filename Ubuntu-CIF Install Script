#/!bin/sh
## $Id: ubuntu-cif.sh 29/01/2015 $
##
## script to install CIF 1.0.3 on debian/ubuntu 14.04.1
##
## Authored by daverstephens@gmail.com
##
## https://github.com/daverstephens/The-SOC-Shop
##
## Start with a base install of 64bit Ubuntu Server 14.04.01
## which should include OpenSSH option selected during install
##
## Tested against CIF 1.0.3 
##
## Run the script as the standard user with the command below
## 
## sudo sh -x ubuntu-cif.sh 2>&1 | tee ubuntu-cif.log
##
## When the script has completed, check ubuntu-cif.log for errors
## and then complete the final activities listed at the end of this script

## Install latest updates
	apt-get -y update && apt-get -y upgrade
## Install dependencies
	env DEBIAN_FRONTEND=noninteractive apt-get -y install perl rng-tools build-essential postgresql apache2 apache2-threaded-dev gcc g++ make libexpat1-dev libapache2-mod-perl2 libclass-dbi-perl libnet-cidr-perl libossp-uuid-perl libxml-libxml-perl libxml2-dev libmodule-install-perl libapache2-request-perl libdbd-pg-perl bind9 libregexp-common-perl libxml-rss-perl libapache2-mod-gnutls libapreq2-dev rsync libunicode-string-perl libconfig-simple-perl libmodule-pluggable-perl libmime-lite-perl libfile-type-perl libtext-csv-perl libio-socket-inet6-perl libapr1-dbg libdate-manip-perl libtry-tiny-perl libclass-accessor-perl pkg-config vim libjson-xs-perl perl-modules libdigest-sha-perl libsnappy-dev libdatetime-format-dateparse-perl liblwp-protocol-https-perl libtime-hires-perl libnet-patricia-perl libnet-ssleay-perl liblog-dispatch-perl libregexp-common-net-cidr-perl libtext-table-perl libdatetime-perl libencode-perl libmime-base64-perl libhtml-table-perl libzmq-dev libzmq1 libzeromq-perl libssl-dev cpanminus snmpd

## Set variables
PostGRESVer=$(ls /etc/postgresql)
CIFUser=cif
NetAbuseURL=https://github.com/csirtgadgets/net-abuse-utils-spamhaus/archive/v0.07.tar.gz
NAFile=${NetAbuseURL##*/}
CIFURL=https://github.com/collectiveintel/cif-v1/releases/download/v1.0.3-FINAL/cif-v1-v1.0.3-FINAL.tar.gz
CIFFile=${CIFURL##*/}
home=/home/$CIFUser
NETDNSURL=http://search.cpan.org/CPAN/authors/id/N/NL/NLNETLABS/Net-DNS-0.82.tar.gz
CPUINFOURL=ftp://mirror.atlantic.net/pub/CPAN/modules/by-category/04_Operating_System_Interfaces/Linux/Linux-Cpuinfo-1.7.tar.gz

## Bootstrap CPAN
	mkdir -p /root/.cpan/CPAN
	cat > /root/.cpan/CPAN/MyConfig.pm <<EOF
\$CPAN::Config = {
  'applypatch' => q[],
  'auto_commit' => q[0],
  'build_cache' => q[100],
  'build_dir' => q[/root/.cpan/build],
  'build_dir_reuse' => q[0],
  'build_requires_install_policy' => q[yes],
  'bzip2' => q[/bin/bzip2],
  'cache_metadata' => q[1],
  'check_sigs' => q[0],
  'colorize_output' => q[0],
  'commandnumber_in_prompt' => q[1],
  'connect_to_internet_ok' => q[1],
  'cpan_home' => q[/root/.cpan],
  'ftp_passive' => q[1],
  'ftp_proxy' => q[],
  'getcwd' => q[cwd],
  'gpg' => q[/usr/bin/gpg],
  'gzip' => q[/bin/gzip],
  'halt_on_failure' => q[0],
  'histfile' => q[/root/.cpan/histfile],
  'histsize' => q[100],
  'http_proxy' => q[],
  'inactivity_timeout' => q[0],
  'index_expire' => q[1],
  'inhibit_startup_message' => q[0],
  'keep_source_where' => q[/root/.cpan/sources],
  'load_module_verbosity' => q[none],
  'make' => q[/usr/bin/make],
  'make_arg' => q[],
  'make_install_arg' => q[],
  'make_install_make_command' => q[/usr/bin/make],
  'makepl_arg' => q[INSTALLDIRS=site],
  'mbuild_arg' => q[],
  'mbuild_install_arg' => q[],
  'mbuild_install_build_command' => q[sudo ./Build],
  'mbuildpl_arg' => q[--installdirs site],
  'no_proxy' => q[],
  'pager' => q[/usr/bin/less],
  'patch' => q[/usr/bin/patch],
  'perl5lib_verbosity' => q[none],
  'prefer_external_tar' => q[1],
  'prefer_installer' => q[MB],
  'prefs_dir' => q[/root/.cpan/prefs],
  'prerequisites_policy' => q[follow],
  'scan_cache' => q[atstart],
  'shell' => q[/bin/bash],
  'show_unparsable_versions' => q[0],
  'show_upload_date' => q[0],
  'show_zero_versions' => q[0],
  'tar' => q[/bin/tar],
  'tar_verbosity' => q[none],
  'term_is_latin' => q[1],
  'term_ornaments' => q[1],
  'test_report' => q[0],
  'trust_test_report_history' => q[0],
  'unzip' => q[],
  'use_sqlite' => q[0],
  'version_timeout' => q[15],
  'wget' => q[/usr/bin/wget],
  'yaml_load_code' => q[0],
  'yaml_module' => q[YAML],
};
1;
__END__

EOF
## Install the remaining perl dependencies from CPAN (as root)
## sudo -H perl -MCPAN -e 'o conf init /proxy/'
	echo y | perl -MCPAN -e shell
	perl -MCPAN -e 'my $c = "CPAN::HandleConfig"; $c->load(doit => 1, autoconfig => 1); $c->edit(prerequisites_policy => "follow"); $c->edit(build_requires_install_policy => "yes"); $c->commit'
## special perl: https://groups.google.com/forum/#!topic/ci-framework/EVsFAc5qp7c
	[ ! -f $NAFile ] && wget $NetAbuseURL
	tar xzf $NAFile && cd net-abuse-* && \
		perl Makefile.PL && make && make install
	cpanm $NETDNSURL 
## 201409 For some reason, it fails if done w classical cpan...
	cpanm $CPUINFOURL
## sudo -H env PERL_MM_USE_DEFAULT=1 http_proxy=$proxy perl -MCPAN -e 'force install Net::Whois::IP,Net::Abuse::Utils'	## NOK
	perl -MCPAN -e "CPAN::Shell->force(qw(install Net::Whois::IP));"
	perl -MCPAN -e "CPAN::Shell->force(qw(install Net::Abuse::Utils));"
	echo y | perl -MCPAN -e 'install Test::SharedFork,Test::TCP,Google::ProtocolBuffers,Iodef::Pb::Simple,Compress::Snappy,Net::DNS::Match,Snort::Rule,Parse::Range,Log::Dispatch,Net::SSLeay,ZeroMQ,Sys::MemInfo,LWP::Protocol::https,LWPx::ParanoidAgent'
## Configure name-servers
	sed -i '/dns-nameservers/c\\tdns-nameservers 127\.0\.0\.1' /etc/network/interfaces
	ifdown eth0 && ifup eth0
## Add default CIF user
	adduser --disabled-password --gecos '' $CIFUser
## CIF Router config
	a2dismod gnutls
	a2ensite default-ssl
	a2enmod apreq2
	a2enmod ssl
	perl -pi -e "s@^NameVirtualHost *:80@#NameVirtualHost *:80@;s@^Listen 80@#Listen 80@;" /etc/apache2/ports.conf
## sudo vi /etc/apache2/sites-available/default-ssl
	perl -MCPAN -e 'install Apache2::REST'
	perl -pi -e "s@<VirtualHost _default_:443>@<VirtualHost _default_:443>\n\t\tPerlRequire /opt/cif/bin/http_api.pl\n\t\tInclude /etc/apache2/cif.conf@;" /etc/apache2/sites-available/default-ssl.conf
	cat > /etc/apache2/cif.conf <<EOF
## from https://code.google.com/p/collective-intelligence-framework/wiki/ServerInstall
# Make sure you
#LoadModule apreq_module modules/mod_apreq2.so
#LoadModule perl_module modules/mod_perl2.so
# Load Apache2::REST
#PerlModule Apache2::REST

<Location /api>
    SetHandler perl-script
    PerlResponseHandler CIF::Router::HTTP
    PerlSetVar CIFRouterConfig "/home/cif/.cif"
</Location>
EOF

	adduser www-data $CIFUser
## Random Number Generator config
	echo 'HRNGDEVICE=/dev/urandom' | tee -a /etc/default/rng-tools
	service rng-tools restart
## Bind config
	cat > /etc/bind/named.conf.options <<EOF
options {
	directory "/var/cache/bind";

    // If there is a firewall between you and nameservers you want
    // to talk to, you may need to fix the firewall to allow multiple
    // ports to talk.  See http://www.kb.cert.org/vuls/id/800113

    // If your ISP provided one or more IP addresses for stable
    // nameservers, you probably want to use them as forwarders.
    // Uncomment the following block, and insert the addresses replacing
    // the all-0's placeholder.
    dnssec-validation auto;
    forward only;
    forwarders {
        8.8.8.8;
        8.8.4.4;
    };

    auth-nxdomain no;    # conform to RFC1035
    // listen-on-v6 { any; };
    listen-on { 127.0.0.1; };
};

// bypass the Google public servers
zone "cymru.com" {
    forward only;
    type forward;
    forwarders { };
};

zone "zen.spamhaus.org" {
    forward only;
    type forward;
    forwarders { };
};

zone "dbl.spamhaus.org" {
    forward only;
    type forward;
    forwarders { };
};
EOF

service bind9 restart
## PostGRES install and config
	install -d -o postgres -g postgres /mnt/archive
	install -d -o postgres -g postgres /mnt/index
	service postgresql stop
	[ ! -d /mnt/pg_xlog ] && mv /var/lib/postgresql/$PostGRESVer/main/pg_xlog /mnt/pg_xlog
	#sudo rm -rf /var/lib/postgresql/$PostGRESVer/main/pg_xlog
	ln -s /mnt/pg_xlog /var/lib/postgresql/$PostGRESVer/main/pg_xlog

	cat > /tmp/patch-pg_hba.patch <<EOF
--- /etc/postgresql/9.3/main/pg_hba.conf        2014-10-27 13:34:11.454274638 +0000
+++ /etc/postgresql/9.3/main/pg_hba2.conf       2014-10-27 14:40:38.418428634 +0000
@@ -82,16 +82,16 @@
 # maintenance (custom daily cronjobs, replication, and similar tasks).
 #
 # Database administrative login by Unix domain socket
-local   all             postgres                                peer
+local   all             postgres                                trust

 # TYPE  DATABASE        USER            ADDRESS                 METHOD

 # "local" is for Unix domain socket connections only
-local   all             all                                     peer
+local   all             all                                     trust
 # IPv4 local connections:
-host    all             all             127.0.0.1/32            md5
+host    all             all             127.0.0.1/32            trust
 # IPv6 local connections:
-host    all             all             ::1/128                 md5
+host    all             all             ::1/128                 trust
 # Allow replication connections from localhost, by a user with the
 # replication privilege.
 #local   replication     postgres                                peer
EOF

	patch -p0 /etc/postgresql/$PostGRESVer/main/pg_hba.conf < /tmp/patch-pg_hba.patch
##
## Performance Configuration
##
## Backup system files
## cp /etc/sysctl.conf{,.orig}
	cp /etc/sysctl.conf /etc/sysctl.conf.orig
	cp /etc/postgresql/$PostGRESVer/main/postgresql.conf /etc/postgresql/$PostGRESVer/main/postgresql.conf.orig
	service postgresql start
## Configure...
## 	shared memory (to about 1/2 - 2/3 the amount of system ram)
## 	control virtual memory overcommit and swappiness 
	cat > /tmp/shmsetup.sh <<EOF
#!/bin/bash
page_size=\`getconf PAGE_SIZE\`
phys_pages=\`getconf _PHYS_PAGES\`
shmall=\`expr \$phys_pages / 2\`
shmmax=\`expr \$shmall \* \$page_size\`
echo kernel.shmmax = \$shmmax
echo kernel.shmall = \$shmall
echo vm.overcommit_memory = 2
echo vm.swappiness = 0
# If you install CIF on a machine with limited ram and 
# have out of memory issues, uncomment the next line
# echo vm.overcommit_ratio = 100
EOF

	/bin/bash /tmp/shmsetup.sh | tee -a /etc/sysctl.conf
	sysctl -p
## Comment out current shared_buffer + max_conns settings
	sed -i 's/shared_buffers/#shared_buffers/' /etc/postgresql/$PostGRESVer/main/postgresql.conf
	sed -i 's/max_connections/#max_connections/' /etc/postgresql/$PostGRESVer/main/postgresql.conf
## create postgressetup.sh to configure better defaults for your CIF installation 
	cat > /tmp/postgressetup.sh <<EOF
#!/bin/bash
page_size=\`getconf PAGE_SIZE\`
phys_pages=\`getconf _PHYS_PAGES\`
total_ram_b=\`expr \$page_size \* \$phys_pages\`
total_ram_kb=\`expr \$total_ram_b / 1024\`
total_ram_mb=\`expr \$total_ram_kb / 1024\`
ten_percent_total_ram=\`expr \$total_ram_mb / 10\`

work_mem=\`expr \$total_ram_mb / 8\`
shared_buffers=\$ten_percent_total_ram
effective_cache_size=\`expr \$ten_percent_total_ram \* 6\`

echo ""
echo ""
echo "#------------------------------------------------------------------------------"
echo "# CIF Setup                                                                    "
echo "#------------------------------------------------------------------------------"
echo "# Rough estimates on how to configured postgres to work with large data sets"
echo "# See the following URL for proper postgres performance tuning"
echo "# http://wiki.postgresql.org/wiki/Tuning_Your_PostgreSQL_Server"
echo "wal_buffers = 12MB" " # recommended range for this value is between 2-16MB"
echo "work_mem = \$work_mem""MB" " # minimum 512MB needed for cif_feed"
echo "shared_buffers = \$shared_buffers""MB" "# recommended range for this value is 10% on shared db server"
echo "checkpoint_segments = 10" " # at least 10, 32 is a more common value on dedicated server class hardware"
echo "effective_cache_size = \$effective_cache_size""MB" " # recommended range for this value is between 60%-80% of your total available RAM"
echo "max_connections = 8" " # limiting to 8 due to high work_mem value"
EOF

	/bin/bash /tmp/postgressetup.sh | tee -a /etc/postgresql/$PostGRESVer/main/postgresql.conf
	service postgresql restart
## Install CIF v1.0.3-FINAL
	[ ! -f $CIFFile ] && wget $CIFURL
	tar xzf $CIFFile && cd cif*
	./configure && make testdeps
 	make install
	make initdb
## Set user path
	cat >> /$home/.profile <<EOF
# setup CIF environment $PATH 
if [ -d "/opt/cif/bin" ]; then
    PATH="/opt/cif/bin:$PATH"
fi
EOF
## CIF Config
	cat >> /tmp/.cif <<EOF
# the simple stuff
# cif_archive configuration is required by cif-router, cif_feed (cif-router, libcif-dbi)
[cif_archive]
# if we want to enable rir/asn/cc, etc... they take up more space in our repo
# datatypes = infrastructure,domain,url,email,search,malware,cc,asn,rir
datatypes = infrastructure,domain,url,email,search,malware

# if you're going to enable feeds
feeds = infrastructure,domain,url,email,search,malware

# enable your own groups is you start doing data-sharing with various groups
#groups = everyone,group1.example.com,group2.example.com,group3.example.com

# client is required by the client, cif_router, cif_smrt (libcif, cif-router, cif-smrt)
[client]
# the apikey for your client
apikey = XXXXXX-XXX-XXXX

[client_http]
host = https://localhost:443/api
verify_tls = 0

# cif_smrt is required by cif_smrt
[cif_smrt]
# change example.com to your local domain and hostname respectively
# this identifies the data in your instance and ties it to your specific instance in the event
# that you start sharing with others
#name = example.com
#instance = cif.example.com
name = localhost
instance = cif.localhost

# the apikey for cif_smrt
apikey = XXXXXX-XXX-XXXX 

# advanced stuff
# db config is required by cif-router, cif_feed, cif_apikeys (cif-router, libcif-dbi)
[db]
host = 127.0.0.1
user = postgres
password =
database = cif

# if the normal IODEF restriction classes don't fit your needs
# ref: https://code.google.com/p/collective-intelligence-framework/wiki/RestrictionMapping_v1
# restriction map is required by cif-router, cif_feed (cif-router, libcif-dbi)

[restriction_map]
#need-to-know = amber
#private = red
#default = amber
#public = green     

# logging
# values 0-4
[router]
# set to 0 if it's too noisy and reload the cif-router (apache), only on for RC2
debug = 1

[cif_feed]
# max size of any feed generated
limit = 50000

# each confidence level to generate
confidence = 95,85,75,65

# what 'role' keys to use to generate the feeds
roles = role_everyone_feed

# how far back in time to generate the feeds from
limit_days = 7

# how many days of generated feeds to keep in the archive
feed_retention = 7
EOF

	[ ! -f $home/.cif ] && install -o cif -m 644 /tmp/.cif $home/
	service apache2 restart
## Set-Up CIF user cron job
	cat > /tmp/cif-cron <<EOF
# set the path
PATH=/bin:/usr/local/bin:/opt/cif/bin

# pull feed data
05     *       * * * /opt/cif/bin/cif_crontool -p hourly -P -d -A root >> /var/log/cif/crontool_hourly.log 2>&1
30     00      * * * /opt/cif/bin/cif_crontool -p daily -P -d -A root >> /var/log/cif/crontool_daily.log 2>&1

# if you've enabled feed generation in your config
45     *       * * * /opt/cif/bin/cif_feed -d >> /var/log/cif/cif_feed.log 2>&1

# administrative cleaning, https://groups.google.com/forum/#!topic/ci-framework/yOzWVSYf9_k ; moved to cif_vacuum
#00      04      * * * /opt/cif/bin/cif_prune -k 90 -d -c 40 -s medium 2>&1
EOF
	[ ! -f /var/spool/cron/crontabs/cif ] && install -o cif -m 600 /tmp/cif-cron /var/spool/cron/crontabs/cif

	install -d -m 755 -o cif -g cif /var/log/cif
	cat >> /tmp/cif-logrotate <<EOF
/var/log/cif/*.log {
          weekly
          rotate 52
          compress
          notifempty
          missingok
          nocreate
}
EOF
	[ ! -f /etc/logrotate.d/cif ] && install -o cif -m 644 /tmp/cif-logrotate /etc/logrotate.d/cif
# All commands flagged by ## are run from the command line replacing any variables with
# the correct values.
#
# Change to CIF user
#
## sudo su - cif
#
# Generate initial API key
#
## cif_apikeys -u "<myuser@example.com>" -a -g everyone -G everyone
#
# Generate SMRT API key
#
## cif_apikeys -u cif_smrt -G everyone -g everyone -a -w
#
# Generate feed API key
#
## cif_apikeys -u "role_everyone_feed" -G everyone -g everyone -a
#
# List API keys
#
## cif_apikeys -l
#
# Add initial API and SMRT keys to .cif file
# Exit CIF user and restart apache
#
## sudo service apache2 restart
#
# re-login as the cif user and test your connectivity to the router:
# Test 1
#
## cif -d -q example.com
#
# This should return some search results
#
# Load data
#
## time cif_crontool -p hourly -d -P
#
## time cif_crontool -p daily -d -P
#
# Test 2
#
## cif -d -M -q google.com
#
# This should return some more search results
#
# Generate initial feed batch
#
## time cif_feed -d
#
# Test 3
#
## time cif -M -d -q infrastructure/scan -c 85
#
# This should return a feed dataset
#
# SNMP Agent config if you want to monitor your server
##	cat > /etc/snmp/snmpd.conf <<EOF
## rocommunity public
## syslocation "Whatever"
## syscontact whatever@whatever.com
## sysname whatever.whatever.com
## EOF
#
## sed -i "/^SNMPDOPTS=.*/SNMPDOPTS=\'-Lsd -Lf \/dev\/null -u snmp -I -smux -p \/var\/run\/snmpd\.pid -c \/etc\/snmp\/snmpd\.conf\'" /etc/default/snmpd
# Restart SNMP Daemon
## /etc/init.d/snmpd restart
