#/!bin/sh
## $Id: ubuntu-misp.sh 26/01/2015 $
##
## script to install MISP on debian/ubuntu 14.04.1
##
## Authored by daverstephens@gmail.com
##
## https://github.com/daverstephens/The-SOC-Shop
##
## Start with a base install of 64bit Ubuntu Server 14.04.01
## which should include OpenSSH, LAMP and Mail Server options
## selected during install
##
## Tested against MISP 2.3 (Hotfix 40) 
##
## Run the script as the standard user with the command below
## 
## sudo sh -x ubuntu-misp.sh 2>&1 | tee ubuntu-misp.log
##
## When the script has completed, check ubuntu-misp.log for errors
## and then complete the final activities listed at the end of this script
# Declare variables
#
# MySQL Root User
MySQLRUser=root
MySQLRPass=password
# MySQL Misp User
MySQLUUser=mispadmin
MySQLUPass=password
# MISP DB name
MISPDB=misp
# Encryption Salt - To be replaced with 32 character string
Salt=1234567890abcdefghijklmnopqrstuv
# Organisational name
Orgname=Test.com
# MySQL port
DB_Port=3306
# Admin Email Address to be used
AdminEmail=admin@Test.com
# Base URL for the MISP application (Server IP or FQDN)
BaseURL=http://192.168.1.1
# GnuPG Certificate Email, GnuPG Home dir and GnuPG password
GnuPGEmail=admin@Test.com
GnuPGHomeDir=/var/www/MISP/.gnupg
GnuPGPassword=password
# Install latest updates
	apt-get -y update && apt-get -y upgrade
# Install MISP dependencies
	env DEBIAN_FRONTEND=noninteractive apt-get -y install zip php-pear git redis-server make php5-dev php5-redis
	pear install Crypt_GPG
	pear install Net_GeoIP
# Clone MISP
	cd /var/www/
	git clone https://github.com/MISP/MISP.git
# Make git ignore filesystem permission differences
	cd /var/www/MISP
	git config core.filemode false
# install Mitre's STIX and its dependencies by running the following commands:
	env DEBIAN_FRONTEND=noninteractive apt-get -y install python-dev python-pip libxml2-dev libxslt-dev zlib1g-dev
	cd /var/www/MISP/app/files/scripts
	git clone https://github.com/CybOXProject/python-cybox.git
	git clone https://github.com/STIXProject/python-stix.git
	cd /var/www/MISP/app/files/scripts/python-cybox
	python setup.py install
	cd /var/www/MISP/app/files/scripts/python-stix
	python setup.py install
# CakePHP is now included as a submodule of MISP, execute the following commands to let git fetch it:
	cd /var/www/MISP
	git submodule init
# git rm --cached app/Plugin/CakeResque 
	git submodule update
# Once done, install CakeResque along with its dependencies if you intend to use the built in background jobs:
	cd /var/www/MISP/app
	curl -s https://getcomposer.org/installer | php
	php composer.phar require --no-update kamisama/cake-resque:4.1.0
	php composer.phar config vendor-dir Vendor
	php composer.phar install
# CakeResque normally uses phpredis to connect to redis, but it has a (buggy) fallback connector through Redisent. 
# It is highly advised to install phpredis - installed in first set of deps.
	pecl install redis
	cat >> /etc/php5/apache2/php.ini <<EOF
extension=redis.so
EOF
# To use the scheduler worker for scheduled tasks, do the following:
	cp -fa /var/www/MISP/INSTALL/setup/config.php /var/www/MISP/app/Plugin/CakeResque/Config/config.php
# Check if the permissions are set correctly using the following commands as root:
	chown -R www-data:www-data /var/www/MISP
	chmod -R 750 /var/www/MISP
	chmod -R g+ws /var/www/MISP/app/tmp
	chmod -R g+ws /var/www/MISP/app/files
	chmod -R g+ws /var/www/MISP/app/files/scripts/tmp
# MySQL Commands
	mysql -u $MySQLRUser -p$MySQLRPass mysql -e "CREATE USER '$MySQLUUser'@'localhost' IDENTIFIED BY '$MySQLUPass';"
	mysql -u $MySQLRUser -p$MySQLRPass mysql -e "CREATE DATABASE $MISPDB;"
	mysql -u $MySQLRUser -p$MySQLRPass mysql -e "GRANT ALL PRIVILEGES ON  $MISPDB.* TO $MySQLUUser@localhost;"
	mysql -u $MySQLUUser -p$MySQLUPass misp < /var/www/MISP/INSTALL/MYSQL.sql
# Now configure your apache server with the DocumentRoot /var/www/MISP/app/webroot/
# A sample ghost can be found in /var/www/MISP/INSTALL/apache.misp
	cp /var/www/MISP/INSTALL/apache.misp /etc/apache2/sites-available/misp.conf
cat >> /etc/apache2/httpd.conf <<EOF
ServerName localhost
EOF
# Be aware that the configuration files for apache 2.4 and up have changed.
# The configuration file has to have the .conf extension in the sites-available directory
# For more information, visit http://httpd.apache.org/docs/2.4/upgrading.html
	a2dissite 000-default
	a2ensite misp.conf
# Enable modules
	a2enmod rewrite
# Restart apache
	service apache2 reload
# MISP Config
# There are 4 sample configuration files in /var/www/MISP/app/Config that need to be copied
	cd /var/www/MISP/app/Config
	cp -a bootstrap.default.php bootstrap.php
	cp -a database.default.php database.php
	cp -a core.default.php core.php
	cp -a config.default.php config.php
# Configure the fields in the newly created files:
# database.php : login=$MySQLUUser, password=$MySQLUPass, host=localhost
	sed -i 's/127\.0\.0\.1/localhost/g' /var/www/MISP/app/Config/database.php
	sed -i "s/db login/$MySQLUUser/g" /var/www/MISP/app/Config/database.php
	sed -i "s/db password/$MySQLUPass/g" /var/www/MISP/app/Config/database.php
	sed -i "s/8889/$DB_Port/g" /var/www/MISP/app/Config/database.php
# To enable the background workers, if you have installed CakeResque, uncomment the following lines:
# in Core.php (if you have just recently updated MISP, just add this line at the end of the file):
# require_once dirname(__DIR__) . '/Vendor/autoload.php';
	sed -i 's/\/\/require_once dirname/require_once dirname/g' /var/www/MISP/app/Config/core.php
# in bootstrap.php uncomment the following line (at the end of the file):
# CakePlugin::loadAll(array('CakeResque' => array('bootstrap' => true)));
	cat >> /var/www/MISP/app/Config/bootstrap.php <<EOF
CakePlugin::loadAll(array(
        'CakeResque' => array('bootstrap' => true)
));
EOF
# Important! Change the salt key in /var/www/MISP/app/Config/config.php
# The admin user account will be generated on the first login, make sure that the salt is changed before you create that user
# If you forget to do this step, and you are still dealing with a fresh installation, just alter the salt,
# delete the user from mysql and log in again using the default admin credentials (admin@admin.test / admin)
# and make sure the file permissions are still OK
	sed -i "s/Rooraenietu8Eeyo<Qu2eeNfterd-dd+/$Salt/g" /var/www/MISP/app/Config/config.php
	sed -i "s/ORGNAME/$Orgname/g" /var/www/MISP/app/Config/config.php
	sed -i "s/email@address\.com/$AdminEmail/g" /var/www/MISP/app/Config/config.php
	sed -i "s,\x27baseurl\x27 => \x27\x27,\x27baseurl\x27 => \x27$BaseURL\x27,g" /var/www/MISP/app/Config/config.php
	sed -i "s,\x27email\x27 => \x27\x27,\x27email\x27 => \x27$GnuPGEmail\x27,g" /var/www/MISP/app/Config/config.php
	sed -i "s,\x27homedir\x27 => \x27\x27,\x27homedir\x27 => \x27$GnuPGHomeDir\x27,g" /var/www/MISP/app/Config/config.php
	sed -i "s,\x27password\x27 => \x27\x27,\x27password\x27 => \x27$GnuPGPassword\x27,g" /var/www/MISP/app/Config/config.php
# Added background worker flag to config.php
	cat >> /var/www/MISP/app/Config/bootstrap.php <<EOF
Configure::write('MISP.background_jobs', true);
EOF
# Need to add GPG stuff to config.php
	chown -R www-data:www-data /var/www/MISP/app/Config
	chmod -R 750 /var/www/MISP/app/Config
# Install tools ready to generate GPG encryption key.
	apt-get -y install rng-tools
	rngd -r /dev/urandom
	mkdir /var/www/MISP/.gnupg
	chown www-data:www-data /var/www/MISP/.gnupg
	chmod 700 /var/www/MISP/.gnupg
# To make the background workers start on boot
	chmod +x /var/www/MISP/app/Console/worker/start.sh
	cat >> /etc/rc.local <<EOF
su www-data -c 'bash /var/www/MISP/app/Console/worker/start.sh'
EOF
# As it's bad practice to have anything involving creating GPG certs in batch files
# the following final commands will need to be carried out manually.
# All commands flagged by ## are run from the command line replacing any variables with
# the correct values.
#
# Switch to the root user account
#
##	sudo -s
# 
# Create your GPG Key
# Recommended key type: RSA
# The email address should match the one set in the config.php configuration 
# file as the $GnuPGEmail variable
#
##	sudo -u www-data gpg --homedir $GnuPGHomeDir --gen-key
#
# And now export the public key to the webroot
#
##	sudo -u www-data gpg --homedir $GnuPGHomeDir --export --armor $GnuPGEmail > /var/www/MISP/app/webroot/gpg.asc
#
# Start the workers to enable background jobs and ensure this completes without error.
#
##	/var/www/MISP/app/Console/worker/start.sh
#
# Now log in using the webinterface:
# The default user/pass = admin@admin.test/admin
# Using the server settings tool in the admin interface (Administration -> Server Settings)
# set MISP up to your preferences - It is especially vital to ENSURE THAT NO CRITICAL ISSUES REMAIN!
# Once complete, have a look at the diagnostics
# 
# If any of the directories that MISP uses to store files are not writeable to the apache user, change the permissions
# you can do this by running the following commands:
#
## chmod -R 750 /var/www/MISP/<directory path with an indicated issue>
#
## chown -R www-data:www-data /var/www/MISP/<directory path with an indicated issue>
#
# Make sure that the STIX libraries and GnuPG work as intended, if not, refer to INSTALL.txt's paragraphs dealing with these two items
